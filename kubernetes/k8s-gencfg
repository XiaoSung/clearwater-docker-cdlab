#!/usr/bin/python3 -u
"""
Generate K8s config from template files
"""

import argparse
import os
import re

def parse_file(args,filename, input_file, output_file):
    with open(input_file) as file:
        input_data = file.read()

    # IMAGE_SECRET is an optional argument
    # ~ means null in yaml
    output_data = input_data.replace("{{IMAGE_PATH}}", args.image_path) \
                  .replace("{{IMAGE_TAG}}", args.image_tag) \
                  .replace("{{IMAGE_SECRET}}", args.image_secret if (args.image_secret != None) else "~") \
                  .replace("extensions/v1beta1","apps/v1")
    if (filename.find("depl")) != -1:
        if (output_data.find("selector")) == -1:
            if (filename.find("etcd-depl"))==-1:
                text = """spec:
  selector:
    matchLabels:
      service: {{replace}}"""
                text = text.replace("{{replace}}",filename.split('-')[0])
                output_data = output_data.replace("spec:",text,1)
            else:
                text = """spec:
  selector:
    matchLabels:
      instance-type: etcd-pod"""
                output_data = output_data.replace("spec:",text,1)

    with open(output_file, "w") as file:
        file.write(output_data)

def parse_files_in_dir(args, src, dest):
    for template_file_name in os.listdir(src):
        template_name = template_file_name.split('.')[0]

        output_file_name = template_name + ".yaml"

        print("Generate %s from %s" % (output_file_name, template_file_name))

        parse_file(args, template_name, os.path.join(src, template_file_name), os.path.join(dest, template_name+".yaml"))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
            '--image_path', required=True,
            help='The path to the images to use')
    parser.add_argument(
            '--image_tag', required=True, 
            help='The image tag to use')
    parser.add_argument(
            '--image_secret', required=False, 
            help='(Optional) The kubernetes secret for authenticating with the container registry')
    args = parser.parse_args()

    # Create kubernetes manifests
    template_dir = "templates"

    if not os.path.isdir(template_dir):
        print("This script must be run from the kubernetes directory")

    parse_files_in_dir(args, src=template_dir, dest='.')

    # Create helm chart
    helmchart_dir = "clearwater"
    helmchart_templates_dir = os.path.join(helmchart_dir, "templates")

    if not os.path.exists(helmchart_templates_dir):
        os.makedirs(helmchart_templates_dir)

    parse_files_in_dir(args, src="helm", dest=helmchart_dir)

    helm_args=parser.parse_args(args=['--image_path', '{{ .Values.image.path }}', '--image_tag', '{{ .Values.image.tag }}'])
    parse_files_in_dir(helm_args, src=template_dir, dest=helmchart_templates_dir)
